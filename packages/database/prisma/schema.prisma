datasource db {
  provider = "postgresql"
  url      = env("APP_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  selectedPersonalityId String?
  selectedPersonality   Personality? @relation(fields: [selectedPersonalityId], references: [id], onDelete: Cascade)

  // A user can have many ChatLogs (when senderType = USER)
  ChatLog ChatLog[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum ChatVia {
  TEXT
  AUDIO
}

// Who sent this message?
enum SenderType {
  USER
  SYSTEM
}

// This model can store either a user message or a bot message.
// If senderType = USER, 'userId' is set and 'personalityId' is null.
// If senderType = BOT, 'personalityId' is set and 'userId' is null.
model ChatLog {
  id String @id @default(cuid())

  // Added to distinguish user vs. bot
  senderType SenderType @default(USER)

  via ChatVia

  // If via = TEXT, store the text message here:
  message String?

  // If via = AUDIO, store a pointer to the audio recording row
  audioRecordingId String?
  audioRecording   AudioRecording? @relation(fields: [audioRecordingId], references: [id])

  // Optional link to the human user who sent the message
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional link to the Personality if this message came from the bot
  personalityId String?
  personality   Personality? @relation(fields: [personalityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// A separate model to handle audio file info, so you can reuse it anywhere
model AudioRecording {
  id            String   @id @default(cuid())
  path          String // e.g. S3 bucket path or local path
  filename      String? // optional for naming
  transcription String? // optional transcription text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // If you want a direct reference to a user or more relationships,
  // you can add them here.
  ChatLog ChatLog[]
}

model Personality {
  id         String              @id @default(cuid())
  name       String
  settingsId String              @unique
  settings   PersonalitySettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ChatLog   ChatLog[]
  User      User[]
}

model PersonalitySettings {
  id               String   @id @default(cuid())
  maxContextLength Int      @default(10)
  systemPrompt     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  Personality Personality?
}
